{"version":3,"sources":["components/Todositem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Todositem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","padding","borderBottom","backgroundColor","props","i","completed","inherits","createClass","key","value","_this$props$i","id","title","react_default","a","createElement","style","type","onChange","markComplete","bind","marginLeft","display","btnStyle","onClick","delTodo","Component","color","borderRadius","float","border","cursor","Todos","todos","map","components_Todositem","AddTodo","state","e","setState","defineProperty","target","name","onSubmit","preventDefault","addTodo","placeholder","flex","className","About","Fragment","App","toConsumableArray","filter","newTodo","uuid","v4","_this2","axios","get","then","res","data","_this3","BrowserRouter","Route","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dbe1cac.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport class Todositem extends Component {\n   getStyle = () => {\n    //    if(this.props.i.completed){\n    //        return{\n    //            backgroundColor: 'lightgreen'\n    //        }\n    //    }\n    //    else{\n    //        return{\n    //            backgroundColor: '#fff'\n    //        }\n    //    }\n          return{\n              padding: '10px',\n              borderBottom: '1px #ccc dotted',\n              backgroundColor : this.props.i.completed ? 'lightgreen' : '#fff'\n          }\n   }\n  \n   \n    render() {\n        const { id, title } = this.props.i;\n    return (\n    //   <div style={{ backgroundColor: \"#f7f7f7\"}}>   //inline CSS\n        // <div style={ itemStyle }>\n      <div style={ this.getStyle() }>\n        <input type=\"checkbox\" onChange={ this.props.markComplete.bind(this, id) }/> \n        <p style={{ marginLeft:'10px', display:'inline-block'}}> { title } </p>\n        <button style={ btnStyle } onClick={this.props.delTodo.bind(this, id)}>x</button>\n      </div>\n    )\n  }\n} \n\n// const itemStyle = {\n//     backgroundColor : '#f7f7f7'\n// }\n\nconst btnStyle = {\n    backgroundColor : '#ff0000',\n    color : '#fff',\n    borderRadius : '50%',\n    float : 'right',\n    padding : '5px 8px',\n    border : 'none',\n    cursor : 'pointer', \n}\n\n//Props Types\nTodositem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\nexport default Todositem\n","import React, { Component } from 'react';\nimport Todositem from './Todositem';\nimport PropTypes from 'prop-types';\n\n\nclass Todos extends Component {\n  \n  render() {\n    //   console.log(this.props.todos)\n    return this.props.todos.map((i) => (\n        <Todositem key={i.id} i={i} markComplete={this.props.markComplete} delTodo = {this.props.delTodo}/>\n    ));\n}\n}\n //PropTypes\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired\n}\n\nexport default Todos;\n","import React, { Component } from 'react'\n\nexport class AddTodo extends Component {\n    state = {\n        title : ''\n    }\n\n    onChange = (e) => this.setState({ [ e.target.name ]: e.target.value });\n    \n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({ title: ''})\n    }\n  render() {\n    return (\n        <form onSubmit={this.onSubmit} style={{ display:'flex' }}>\n            <input \n                type=\"text\" \n                name=\"title\" \n                placeholder=\"Add todo ....\" \n                style={{ flex:'10',padding:'5px'}}\n                value={this.state.title}\n                onChange={this.onChange} \n            />\n            <input  \n                type=\"submit\" \n                value=\"submit\" \n                className=\"btn\" \n                style={{ flex:'1' }} \n            />\n        </form>\n    )\n  }\n}\n\nexport default AddTodo\n","import React from 'react'\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p>This is the TodoList App</p>\n    </React.Fragment>\n  )\n}\n\n\nexport default About;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport uuid from 'uuid';\nimport About from './components/pages/About';\nimport axios from 'axios';\n// import Header from './components/layout/Header';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: [\n      // {\n      //   id : uuid.v4(),\n      //   title : \"React JavaScript\",\n      //   completed : false\n      // },\n      \n    ]\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=100').then(res => this.setState({ todos: res.data }))\n  }\n  // toggle complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(i => {\n      if(i.id === id){\n        i.completed = !i.completed\n      }\n      return i;\n    })});\n  }\n\n  //delete Todo\n  delTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(i => i.id !== id)]})\n  }\n\n  //add todo\n  addTodo = (title) => {\n    const newTodo = {\n        id : uuid.v4(),\n        title,\n        completed : false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo]})\n  }\n\n  render() {\n        // console.log(this.state.todos)\n    return (\n      <Router>\n      <div className='App'>\n      <div className=\"container\">\n        <Route exact path=\"/\" render={props => (\n          <React.Fragment>\n              <AddTodo addTodo={this.addTodo}/>\n              <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n          </React.Fragment>\n        )} />\n        <Route path=\"/about\" component={About}/>\n        \n      </div>\n      </div>\n      </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}